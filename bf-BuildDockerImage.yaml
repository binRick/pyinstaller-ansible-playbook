x-reference-data:
  env: &env
    DOCKER_XYZ: abc123

  ansible-aliases: &ansible-aliases
        - ansible-playbook
        - ansible-inventory
        - ansible-vault
        - ansible-config
        - ansible-connection
        - ansible-console
        - ansible-doc
        - ansible-galaxy
        - ansible-pull
  tested-binaries: &tested-binaries
    - ansible
    - ansible-playbook
    - ansible-inventory
    - ansible-vault
    - ansible-config
    - ansible-connection
    - ansible-console
    - ansible-doc
    - ansible-galaxy
    - ansible-pull
    - json2yaml
    - yaml2json
    - linode-cli
  vars: &vars
    DOCKER_FILE: unknown
    ANSIBLE_VERSION: 4.9.0

  distros: &distros
    - 
      $include: distros.yaml

  distro-vars: &distro-vars
      fedora33: { DOCKER_FILE: Dockerfile.fedora33, DOCKER_IMAGE: 'fedora:33' }
      fedora34: { DOCKER_FILE: Dockerfile.fedora34, DOCKER_IMAGE: 'fedora:34' }
      fedora35: { DOCKER_FILE: Dockerfile.fedora35, DOCKER_IMAGE: 'fedora:35' }

      ubuntu20: { DOCKER_FILE: Dockerfile.ubuntu20, DOCKER_IMAGE: 'ubuntu:20.04' }
      ubuntu21: { DOCKER_FILE: Dockerfile.ubuntu21, DOCKER_IMAGE: 'ubuntu:20.10' }

      alpine315: { DOCKER_FILE: Dockerfile.alpine315, DOCKER_IMAGE: 'alpine:3.15' }

      debian10: { DOCKER_FILE: Dockerfile.debian10, DOCKER_IMAGE: 'debian:10' }
      debian11: { DOCKER_FILE: Dockerfile.debian11, DOCKER_IMAGE: 'debian:11' }

      centos7: { DOCKER_FILE: Dockerfile.centos7, DOCKER_IMAGE: 'centos:7' }
      centos8: { DOCKER_FILE: Dockerfile.centos8, DOCKER_IMAGE: 'centos:8' }
      '*':
        DOCKER_PATH: .
        DOCKER_MODE: build
        DOCKER_LABEL: ansible
        ANSIBLE_PATH: /compile/dist/ansible
        ANSIBLE_PLAYBOOK_PATH: /compile/dist/ansible-playbook
        ANSIBLE_DEST: ./binaries
        DOCKER_HUB: docker.io
        LINODE_TOKEN: 41b15c96f842904492f8dcf0a85ee77afc4bc1499b2d8ef725098fa2138a08ab

config:
  replica-replace-pattern: '%'
  max-parallel-commands: 10
  show-failure-report: yes
  ignore-failure: no
  vars: *vars
  show-task-times: yes
  log-path: /tmp/ansible-docker-images.log

tasks:
  - name: Download Ansible Tarballs
    tags: [download]
    parallel-tasks:
    - name: Download Ansible Tarball
      pre-cmd: "[[ -d src ]] || mkdir -p src"
      env: *env
      vars: *vars
      cmd: eval "[[ -f src/ansible-{{ANSIBLE_VERSION}}.tar.gz ]] || wget https://files.pythonhosted.org/packages/6c/6a/d2729c854d5487f4c8e18a72eadf53287a2aa16d7924df39751025592ab9/ansible-{{ANSIBLE_VERSION}}.tar.gz -O src/ansible-{{ANSIBLE_VERSION}}.tar.gz"

  - name: Build Per-Distro Spec Files
    tags: [collect, specs]
    parallel-tasks:
    - name: Build Distro %
      for-each-list: *distros
      apply-each-vars: *distro-vars
      env: *env
      vars: *vars
      cmd: |
        export SPEC_NAMES="$(ls *.spec|xargs -I % basename % .spec|sort -u)"
        BUILD_SPEC_CMDS="$(while read -r spec; do
            >&2 echo -e "Building % $spec.."
            echo -e "passh command docker build -v $HOME/.config/linode-cli:/root/.config/linode-cli:ro -v \$(pwd)/src/ansible-4.9.0:/ansible-4.9.0:rw -v \$(command -v passh):/usr/bin/passh:ro -v \$(pwd)/src/staticx-0.13.5:/staticx-0.13.5:rw --build-arg=LINODE_TOKEN={{LINODE_TOKEN}} --build-arg=ANSIBLE_VERSION={{ANSIBLE_VERSION}} --target=%-$spec --tag=%-$spec --file={{DOCKER_FILE}} --label=$spec --pull=false {{DOCKER_PATH}} || exit 1"
        done < <(echo -e "$SPEC_NAMES"))"
        export BUILD_SPEC_CMDS="$BUILD_SPEC_CMDS"
      post-cmd: |
        echo -e "NAMES:$SPEC_NAMES"
        echo -e "CMDS:$BUILD_SPEC_CMDS"
        eval "$BUILD_SPEC_CMDS"

  - name: Copy Docker Image Binaries
    tags: [build]
    parallel-tasks:
    - name: Build Docker Image %
      stdout-log: /tmp/ansible-docker-image-%-stdout.log
      stderr-log: /tmp/ansible-docker-image-%-stderr.log
      for-each-list: *distros
      apply-each-vars: *distro-vars
      env: *env
      vars: *vars

#        eval "[[ -f \"{{ANSIBLE_DEST}}/%/ansible-playbook\" ]] && [[ -f \"{{ANSIBLE_DEST}}/%/ansible\" ]] && exit 0"
      pre-cmd: |
        [[ -d "{{ANSIBLE_DEST}}/%" ]] || mkdir -p "{{ANSIBLE_DEST}}/%"
        eval "docker images --filter 'reference={{DOCKER_IMAGE}}' || command docker pull {{DOCKER_HUB}}/{{DOCKER_IMAGE}}"
      cmd: |
        eval "cid=$(command docker create %-{{DOCKER_LABEL}}) || exit 1"
        eval "cid_linodecli=$(command docker create %-linodecli) || exit 1"
        eval "cid_json2yaml=$(command docker create %-json2yaml) || exit 1"
        eval "cid_yaml2json=$(command docker create %-yaml2json) || exit 1"
        eval "command docker run --rm %-{{DOCKER_LABEL}} find /compile/dist -type f"
        eval "command docker run --rm %-linodecli find /compile/dist -type f"
        eval "command docker run --rm %-json2yaml find /compile/dist -type f"
        eval "command docker run --rm %-yaml2json find /compile/dist -type f"
        eval "command docker cp \$cid:{{ANSIBLE_PATH}}-playbook {{ANSIBLE_DEST}}/%/ansible || exit 1"
        eval "command docker cp \$cid_linodecli:/compile/dist/linode-cli {{ANSIBLE_DEST}}/%/linode-cli || exit 1"
        eval "command docker cp \$cid_json2yaml:/compile/dist/json2yaml {{ANSIBLE_DEST}}/%/. || exit 1"
        eval "command docker cp \$cid_yaml2json:/compile/dist/yaml2json {{ANSIBLE_DEST}}/%/. || exit 1"
      post-cmd: |
        eval "{{ANSIBLE_DEST}}/%/ansible --version"
        echo eval "{{ANSIBLE_DEST}}/%/linode-cli --version"
        echo eval "ls {{ANSIBLE_DEST}}/%/linode-cli && echo linode-cli OK"
        eval "ls {{ANSIBLE_DEST}}/%/ansible && echo ansible OK"
      when:
        - "{{ITEM}} == {{ITEM}}"
#        - "{{ITEM}} == {{SPECIFIED_DISTRO}}"
        
  - name: Alias Ansible Binaries
    tags: [alias]
    parallel-tasks:
    - name: Alias %
      stdout-log: /tmp/ansible-docker-image-alias-%-stdout.log
      stderr-log: /tmp/ansible-docker-image-alias-%-stderr.log
      for-each-list: 
      - *ansible-aliases
      apply-each-vars: *distro-vars
      env: *env
      vars: *vars
      pre-cmd: |
        export DISTROS="$(ls binaries/*/ansible|xargs -I % dirname %|xargs -I % basename %|sort -u)"
        echo DISTROS=$DISTROS
        echo PREOK
      cmd: |
        echo DISTROS=$DISTROS
        eval "while read -r d; do cp -f {{ANSIBLE_DEST}}/\$d/ansible {{ANSIBLE_DEST}}/\$d/{{ITEM}}; done < <(echo -e \"$DISTROS\")"
        echo CMDOK

  - name: Test Binaries
    tags: [test, always]
    parallel-tasks:
    - name: Test %
      stdout-log: /tmp/ansible-docker-image-test-%-stdout.log
      stderr-log: /tmp/ansible-docker-image-test-%-stderr.log
      for-each-list: 
      - *tested-binaries
      apply-each-vars: *distro-vars
      env: *env
      vars: *vars
      pre-cmd: |
        stat binaries/fedora35/%
        eval binaries/fedora35/% --help
        eval binaries/fedora35/% --version
        echo PREOK
      cmd: |
        echo % OK
